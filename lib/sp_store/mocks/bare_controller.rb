# :nodoc: namespace
module SpStore::Mocks

# Software model for the controller that pretends to do security.
class BareController
  # Creates a new mock S-P store controller.
  #
  # Args:
  #   store:: the block store to be served
  #   ca_keys:: keypair for the Certificate Authority
  #   ca_cert:: the CA certificate
  #   keys:: Endorsement Key (a random key is generated by default)
  #   cert:: if given, it is used as an Endorsement Certificate
  def initialize(store, ca_keys, ca_cert, keys = nil, cert = nil)
    @store        = store
    @ekeys        = keys || SpStore::Crypto.key_pair
    controller_dn = {'CN' => 'SP Mock Controller', 'C' => 'US'}
    @ecert        = cert || SpStore::Crypto.cert(controller_dn, 365, ca_keys, ca_cert, @ekeys[:public])
    @hashes       = @store.class.method_defined?(:hashes)? @store.hashes : initialize_hashes
  end

  def initialize_hashes
    hashes = []
    (0...@store.blocks).each do |block_id|
      hashes << SpStore::Crypto.crypto_hash( @store.read_block(block_id) )
    end
    hashes
  end

  def save_hashes
    @store.save_hashes @hashes if @store.class.method_defined? :save_hashes
  end

  def endorsement_certificate
    @ecert
  end

  def session(encrypted_session_key)
    session_key = SpStore::Crypto.pki_decrypt @ekeys[:private],
                                              encrypted_session_key
    Session.new @store, @hashes, session_key
  end
    
end  # class SpStore::Mocks::BareController

# :nodoc: namespace
class BareController

# :nodoc: session implementation
class Session
  def initialize(store, hashes, session_key)
    @store  = store
    @key    = session_key
    @hashes = hashes
  end
  
  def close
  end
  
  def block_size
    @store.block_size
  end
    
  def blocks
    @store.blocks
  end
  
  def read_block(block_id, nonce)
    data = @store.read_block block_id
    hmac = SpStore::Crypto.hmac_for_block_hash block_id, @hashes[block_id], nonce, @key
    return data, hmac
  end

  def write_block(block_id, data, nonce)
    @store.write_block block_id, data
    @hashes[block_id] = SpStore::Crypto.crypto_hash data
    SpStore::Crypto.hmac_for_block_hash block_id, @hashes[block_id], nonce, @key
  end
end  # class SpStore::Mocks::BareController::Session
  
end  # namespace SpStore::Mocks::BareController

end  # namespace SpStore::Mocks
