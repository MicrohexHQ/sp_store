# :nodoc: namespace
module SpStore

# Glues all the S-P store components together.
class Controller
  # Endorsement Certificate for the S-P chip pair.
  def endorsement_certificate

  end

  # Establishes a communication session between the store and one of its users.
  #
  # Args:
  #   nonce:: short random string that prevents replay attacks
  #   encrypted_session_key:: the session HMAC key, encrypted under the server's
  #                           public Endorsement Key
  #
  # Returns a Hash with the following keys:
  #   :nonce_hmac:: proof from the FPGA that the session was acknowledged
  #   :session:: a Server::Session object
  def session(nonce, encrypted_session_key)
    
  end
end  # class SpStore::Mocks::BareController

# :nodoc: namespace
class Controller

# Conversation between a S-P store provider and an user.
class Session
  # Closes the session.
  def close
    
  end
  
  # The size of a block in this store.  
  def block_size
    
  end
  
  # The number of blocks available in this store.
  def blocks
    
  end
  
  # Reads a block from the store.
  #
  # Args:
  #   block_id:: the 0-based number of the block to be read
  #   nonce:: short random string that prevents replay attacks
  #
  # Returns the data block, and an HMAC generated by the P chip, confirming the
  # read.
  def read_block(block_id, nonce)
    
  end

  # Writes a block to the store.
  #
  # Args:
  #   block_id:: the 0-based number of the block to be written
  #   data:: a string of block_size bytes to be stored in the block
  #   nonce:: short random string that prevents replay attacks
  #
  # Returns the HMAC generated by the P chip, confirming the write.
  def write_block(block_id, data, nonce)
    
  end
end

  
end  # namespace SpStore::Mocks::BareController


end  # namespace SpStore::Mocks
